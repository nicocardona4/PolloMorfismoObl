/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package iu;

import dominio.Gestor;
import dominio.Pedido;
import dominio.Servicio;
import dominio.UnidadProcesadora;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import observer.Observable;
import observer.Observador;
import servicios.Fachada;

/**
 *
 * @author maurizio
 */
public class ProcesarPedidosVista extends javax.swing.JDialog implements Observador{

    private Gestor gestor;
    private Fachada f = Fachada.getInstancia();
    private UnidadProcesadora up;
    private List<Pedido> pedidosMostrados;
    private DefaultTableModel dtm;
    private Object[] o = new Object[5];
    
    /**
     * Creates new form ProcesarPedidosVista
     */
    public ProcesarPedidosVista(java.awt.Frame parent, Gestor gestor) {
        super(parent, false);
        initComponents();
        this.gestor = gestor;
        this.up = gestor.getUp();
        dtm = (DefaultTableModel) tblPedidos.getModel();
        mostrarInfoGestor();
         //Sobre los pedidos pendientes. 
        //1: traer de fachada todos los pedidos pendientes de la up asignada al gestor.
        mostrarPedidosPendientes();
        //ToDo: en tblPedidos mostrar los pedidos que tenga el gestor
        mostrarPedidosTomados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtInfo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnTomar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPedidos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnFinalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPedidos = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtInfo.setEditable(false);
        txtInfo.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N

        btnTomar.setText("Tomar Pedido");
        btnTomar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTomarActionPerformed(evt);
            }
        });

        tblPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre de ítem", "Descripción", "Cliente", "Fecha Hora", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPedidos);

        jButton1.setText("Entregar Pedido");

        btnFinalizar.setText("Finalizar Pedido");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        lstPedidos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPedidos.setCellRenderer(new PedidoListCellRenderer());
        lstPedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstPedidosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstPedidos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(514, 514, 514)
                .addComponent(btnTomar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 4, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFinalizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(txtInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnTomar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnFinalizar))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTomarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTomarActionPerformed
        tomarPedido();
    }//GEN-LAST:event_btnTomarActionPerformed

    private void lstPedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPedidosMouseClicked
        // TODO add your handling code here:
        //obtenerPedido();
    }//GEN-LAST:event_lstPedidosMouseClicked

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        // TODO add your handling code here:
        finalizarPedido();
    }//GEN-LAST:event_btnFinalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnTomar;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList lstPedidos;
    private javax.swing.JTable tblPedidos;
    private javax.swing.JTextField txtInfo;
    // End of variables declaration//GEN-END:variables

    private void mostrarInfoGestor() {
        //Todo: agregar unidad procesadora
        txtInfo.setText("Gestor: " + gestor.getNombreCompleto() + " | Unidad Procesadora: " + gestor.getUp().getNombre());
    }

    private void tomarPedido() {
        Pedido p = (Pedido) lstPedidos.getSelectedValue();
        if (p != null){
            p.tomarPedido(this.gestor);
        }
    }
    
    private void finalizarPedido(){
        int fila = tblPedidos.getSelectedRow();
        Pedido p = this.pedidosMostrados.get(tblPedidos.convertRowIndexToModel(fila));
        if(p!=null){
            p.finalizarPedido();
            //despues agregar que solo muestre los que estan en proceso/finalizados? asi se pueden entregar?
            mostrarPedidosTomados();
        }
    }
        
    @Override
    public void actualizar(Observable origen, Object evento) {
        if (EventosRestaurante.ASIGNACION_PEDIDO.equals(evento)) {
            //Refrescar la lista de pendientes, en este caso se asigno alguno
            //de los pedidos pendientes a este u otro gestor. Por lo tanto se debe borrar
            //y cargar de nuevo la lista
            mostrarPedidosPendientes();
            mostrarPedidosTomados();
        }
    }

    private void mostrarPedidosPendientes() {
        //suscribir como observador
        suscribirComoObservador(up);
        lstPedidos.setListData(f.getPedidosPorUp(up).toArray());
    }
    
    private void suscribirComoObservador(UnidadProcesadora up){
        up.removerObservador(this);
        up.agregarObservador(this);
    }

    private void mostrarPedidosTomados() {
         dtm.setRowCount(0);
         List<Pedido> pedidos = new ArrayList<>();

        //tblPedidos.
        for(Pedido pedido : gestor.getPedidosAsignados()){
            Servicio srv = Fachada.getInstancia().getServicioById(pedido.getServicioId());
            Object[] fila = new Object[5];
            pedidos.add(pedido);
            fila[0] = pedido.getItem().getNombre();
            fila[1] = pedido.getDescripcion();
            fila[2] = srv.getCliente().getNombreCompleto();
            fila[3] = pedido.getFechaCreacion();
            fila[4] = pedido.getEstadoActual();
            dtm.addRow(fila);
        }
        this.pedidosMostrados = pedidos;
    }
}
